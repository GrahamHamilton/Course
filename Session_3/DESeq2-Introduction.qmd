---
title: "DESeq2-Introduction"
author: "Graham Hamilton"
format: revealjs
fontsize: 2em
editor: source
---

## Differential gene expression

The vast majority of RNASeq experiments are used to perform differential gene expression analysis:

-   Which genes are expressed at different levels between conditions or treatment
-   Insights into the processes affected by the condition or treatment

## Aims

-   How to set up R and RStudio to analyse RNASeq data
-   Input data format
-   How DESeq2 normalises data
-   Experimental designs
-   Differentail expression
-   Saving data

## Analysis Workflow

::: columns
::: {.column width="\"60%"}
-   Total RNA extracted from the biological samples
-   Sequencing libraries prepared, PolyA selection or random primed
-   Libraries sequenced on Illumina NextSeq 2000, either paired end and single end
:::

::: {.column width="40%"}
```{mermaid}

flowchart TD 

id1(Samples) ---> id2(Library Prep)
id2 ---> id3(Sequence)

style id1 fill:#951272,stroke:#951272,stroke-width:2px,color:#fff
style id2 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
style id3 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
```
:::
:::

## Analysis Workflow

::: columns
::: {.column width="60%"}
-   Quality control of raw sequence data in FastQ format
-   Raw reads are trimmed for low quality bases and sequencing adapters
-   Align the trimmed reads to the reference genome
:::

::: {.column width="40%"}
```{mermaid}

flowchart TD 

id4(Quality Control) ---> id5(Trim Reads)
id5 ---> id6(Align to Reference)

style id4 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
style id5 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
style id6 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
```
:::
:::

## Analysis Workflow

::: columns
::: {.column width="\"60%"}
-   Alignment QC, to check that the reads have aligned as expected
-   Counts features, count the number of reads that align to the genes/features in the gene annotation file (gtf/gff format)
-   Matrix of counts for each gene/feature per sample
:::

::: {.column width="40%"}
```{mermaid}

flowchart TD 

id7(Quality Control) ---> id8(Count Features)
id8 ---> id9(Differential Expression)

style id7 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
style id8 fill:#003865,stroke:#003865,stroke-width:4px,color:#fff
style id9 fill:#006630,stroke:#006630,stroke-width:4px,color:#fff
```
:::
:::

## Counts matrix

-   DESeq2 requires a counts matrix of raw counts
-   Each row is a gene or feature
-   Each column is the number ofreads that align to that gene
-   The higher the number of reads that align to a gene relates to the level of expression

|              | Sample 1 | Sample 2 | Sample 3 |
|-------------:|---------:|---------:|---------:|
| ENSG00000139618 |      522 |      536 |      493 |
| ENSG00000141510 |    26611 |    27523 |    25209 |
| ENSG00000083093 |     1428 |     1622 |     1289 |

## Counts Matrix

-   FeatureCounts, from the Rsubread package, produces a matrix of counts from the aligned BAM files

```{r}
library("tidyverse")
library("kableExtra")
library("matrixStats")
library("PolyomicsTheme")
library("PolyomicsColours")
```

```{r}
counts_table <- read_tsv("data/feature_counts_table.tsv")%>%
  column_to_rownames(var = colnames(.[,1])) %>%
  as.data.frame()
counts_table %>% 
  head(n = 3) %>%
  kbl() %>%
  kable_styling()

```

-   HTSeq-count produces individual counts files from the aligned BAM files

```{r}
files <- list.files(path = "./data/htseq_counts/", recursive = TRUE)
files %>%
  head(n = 6)
```

## RNASeq Count Distribution

To apply the appropriate statistical model we need information on the distribution of the counts

::: columns

::: {.column width="50%"}

```{r}
#| echo: false
ggplot(counts_table) +
  geom_histogram(aes(x = Control_1), stat = "bin", bins = 200) +
  xlab("Raw expression counts") +
  ylab("Number of genes") +
  theme_bw()
```

::: 

::: {.column width="50%"}

The plot shows common features of RNASeq counts data

-   Low number of counts for a large number of genes
-   Long tail to the right
-   Large dynamic range

:::

:::

## Modelling Count Data

RNASeq data count data in general can be modelled with various distributions

1)  **Binomial distribution** - Determines the probability of observing a specified number of successful outcomes in a specified number of trials
2)  **Poisson distribution** - Used when the number of cases (genes) is large, but the probablity of a particular event is small
3)  **Negative binomial distribution** - Similar to the poisson distribution but has an additional parameter that adjusts the variance independantly of the mean

## Modelling Count Data {.smaller}

With RNASeq data there are a large number of genes and the probability of pulling out a particular gene very small. Appropriate distributions would be Poisson or negative binomial, choosing one depends the relationship between the mean and the variance in the data

::: columns

::: {.column width="50%"}
```{r}
#| echo: false
mean_counts <- apply(counts_table[,1:3], 1, mean)
variance_counts <- apply(counts_table[,1:3], 1, var)
df <- data.frame(mean_counts, variance_counts)

ggplot(df) +
  geom_point(aes(x=mean_counts, y=variance_counts)) + 
  scale_y_log10(limits = c(1,1e9)) +
  scale_x_log10(limits = c(1,1e9)) +
  geom_abline(intercept = 0, slope = 1, color="red") +
  theme_bw()
```
Each point represents a gene <br> ÃŸRed line represents the mean

:::

::: {.column width="50%"}

1)  Variance across the replicates tends to be greater than the mean
2)  Genes with low mean counts show more scatter

-   This indicates that the **Negative binomial** distribution best models RNASeq data, where mean \< variance.

    -   More replicates could be added to get the mean == variance, which would result in a Poisson -distribution.

    -   May require more than 20 replicates.

:::

:::

## Normalising Count Data

DESeq2 normalises the counts taking account of the following

-   Differences in the library size
-   Differences in library composition

## Library Size

```{r}
example_table <- read_tsv("./data/example_table.tsv") %>%
  add_row(...1 = "Total", summarise(., across(where(is.numeric), sum))) %>%
  column_to_rownames(var = colnames(.[,1])) %>%
  as.data.frame()

example_table%>%
  select(-Sample3) %>%
  kbl() %>%
  kable_styling()
```

The difference in the number of reads is due to sequencing depth and not biology and needs to be accounted for in the normalisation.

## Library Composition

```{r}
example_table %>%
  kbl() %>%
  kable_styling()
```

-   Calculate a scaling factor for each sample
-   Accounting for read depth and library composition

## Library Composition {.smaller}

```{r}
example_table %>%
  slice_head(n = 3) %>%
  kbl() %>%
  kable_styling()
```

::: columns

::: {.column width="50%"}
<br><br><br>
Step 1. Log transform the counts

```{r}
log_example_table <- example_table %>%
  slice_head(n = 3) %>%
  log()
log_example_table %>%
  kbl() %>%
  kable_styling()
```

:::

::: {.column width="50%"}
<br><br><br>
Step 2. Average each row

```{r}
log_example_table %>%
  rowMeans() %>%
  as.data.frame()  %>%
  rename(Average = ".") %>%
  kbl() %>%
  kable_styling()
```

:::

:::

## Library Composition

-   DESeq2 uses log~*e*~ (log base *e*), raise *e* to the log value to get the original count
-   The log of a zero is **-Infinity**
-   Adding **-Infinity** to a number always results in **-Infinity**
-   Geometric averages lessen the effect of outliers

## Library Composition {.smaller}

Step 3. Remove genes with a geometric average value ***-Inf***

```{r}
inf_removed <- log_example_table %>%
  as.data.frame()  %>%
  filter_all(all_vars(!is.infinite(.))) 

inf_removed %>%
  kbl() %>%
  kable_styling()
```

Step 4. Subtract the average log values from the log of the counts

```{r}
average <- inf_removed %>%
  rowMeans() 

average_sub <- sweep(inf_removed,1,average)
average_sub %>%
  kbl() %>%
  kable_styling()
```

## Library Composition {.smaller}

Step 5. Calculate the median of the ratios for each sample

```{r}
log_median_values <- average_sub %>%
  as.matrix() %>%
  colMedians()

names(log_median_values) <- colnames(average_sub)

log_median_values %>%
  as.data.frame() %>%
  rename("Log Medians" = ".") %>%
  rownames_to_column(var = "Sample") %>%
  kbl() %>%
  kable_styling() 
```

Step 6. Convert log median values to "normal" numbers to get the scaling factors

```{r}
median_values <- exp(log_median_values)
median_values %>% 
  as.data.frame() %>%
  rename("Medians" = ".") %>%
  kbl() %>%
  kable_styling() 
```

## Library Composition {.smaller}

Step 7. Divide the original counts by the scaling factors

#### Original read counts {style="text-align: center;"}

```{r}

example_table%>%
  slice_head(n = 3) %>%
  kbl() %>%
  kable_styling() 
```

#### Scaled read counts {style="text-align: center;"}

```{r}
example_table %>%
  slice_head(n = 3) %>%
  sweep(2,median_values,"/") %>%
  round()%>%
  kbl() %>%
  kable_styling() 
```

## Required Files

-   Counts files, either matrix of counts or individual counts files
-   Gene annotation file (gtf/gff) - **Ensembl**
-   Sample description file - **self generated**
-   Comparison file - **self generated**

::: aside
Ensemb - select organism and download data from: 
http://www.ensembl.org
:::

## Sample Description File

You will need to generate this yourself and save it in tab seperated format

```{r}
sample_table <- read_tsv("data/sample_description.tsv")
sample_table  %>%
  head(n = 6) %>%
  kbl() %>%
  kable_styling() 
```

## Comparisons File

You will need to generate this yourself and save it in tab seperated format

```{r}
sample_table <- read_tsv("data/comparisons.tsv")
sample_table  %>%
  head(n = 4) %>%
  kbl() %>%
  kable_styling() 
```

## Experimental Design

-   Pairwise - Will be covered in this tutorial
-   Batch effects
-   Multifactorial
-   Time course

## Pairwise {.smaller}

Sample description file

| Sample      | Condition |
|:------------|-----------|
|Control_1|Control|
|Control_2|Control|
|Control_3|Control|
|Treatment_1|Treatment|
|Treatment_2|Treatment|
|Treatment_3|Treatment|

<br><br>
Differential expression command

```{r}
#| echo: true
#| eval: false
DESeq2Table <- DESeqDataSetFromMatrix(countData = feature.counts.table,
                                      colData = sample_table,
                                      design = ~  Condition)
```

## Batch effects {.smaller}

Sample description file

| Sample      | **Batch** | Condition |
|:------------|:---------:|-----------|
| Control_1    |   **A**   | Control    |
| Control_2    |   **B**   | Control    |
| Control_3    |   **C**   | Control    |
| Treatment_1 |   **A**   | Treatment |
| Treatment_2 |   **B**   | Treatment |
| Treatment_3 |   **C**   | Treatment |

<br><br>

Differential expression command

```{r}
#| echo: true
#| eval: false
DESeq2Table <- DESeqDataSetFromMatrix(countData = feature.counts.table,
                                      colData = sample_table,
                                      design = ~  Batch + Condition)
```

## Multifactorial
Unlike batch effects, multifactorial design doesn't just correct for background effects, it test whether a factor is "interacting" with the treatment.
```{r}
mult <- read_tsv("./data/multifactorial_table.tsv", col_types = "fdff") %>%
  unite("Names",Sample,Genotype, sep = "_", remove = FALSE) %>%
  mutate_if(is.character,as.factor)

mean <- mult %>%
  group_by(Names) %>%
  summarize(Mean = mean(Expression, na.rm=TRUE)) 

mult <- left_join(mult,mean)

ggplot(mult, aes(x = Names, y = Expression, colour = Names, shape = Genotype)) +
  geom_point( size = 5) +
  scale_x_discrete(limits = unique(mult$Names)) +
  ylim(1,4) +
  polyomics_theme() +
  theme(legend.position = "none",
        axis.line = element_line(colour = "grey"),
        axis.title.x=element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank())
```

## Multifactorial

```{r}
ggplot(mult, aes(x = Names, y = Expression, colour = Names, shape = Genotype)) +
  geom_point( size = 5) +
  scale_x_discrete(limits = unique(mult$Names)) +
  ylim(1,4) +
  geom_errorbar(aes(ymin = Mean, ymax = Mean), width = 1, colour = "grey") +
  annotate("segment", x = 1.5, xend = 1.5, y = 2.15, yend = 1.25, colour = "grey", arrow = arrow()) +
  annotate("segment", x = 1.5, xend = 2.5, y = 2.15, yend = 2.15, colour = "grey", linetype = 2) +
  annotate("segment", x = 2.5, xend = 2.5, y = 2.15, yend = 1.95, colour = "grey", arrow = arrow()) +
  annotate("segment", x = 2.5, xend = 4.5, y = 1.25, yend = 1.25, colour = "grey", linetype = 2) +
  annotate("segment", x = 3.5, xend = 3.5, y = 1.95, yend = 3.20, colour = "grey", arrow = arrow()) +
  annotate("segment", x = 4.5, xend = 4.5, y = 1.25, yend = 3.20, colour = "grey", arrow = arrow()) +
  annotate("text", x = 1.5, y = 2.4, label = "Condition\nEffect") +
  annotate("text", x = 2.5, y = 2.4, label = "Genotype\nEffect") +
  annotate("text", x = 4.25, y = 2.25, label = "Interaction\nEffect\nAlone") +
  polyomics_theme() +
  theme(legend.position = "none",
        axis.line = element_line(colour = "grey"),
        axis.title.x=element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank())
```

## Multifactorial {.smaller}

Sample description file

| Sample         | **Batch** | Condition | Genotype |
|:---------------|:---------:|-----------|:--------:|
| D_drug_1\_X    |   **A**   | D_drug    |    X     |
| D_drug_2\_X    |   **B**   | D_drug    |    X     |
| D_No_drug_1\_X |   **A**   | D_No_drug |    X     |
| D_No_drug_2\_X |   **B**   | D_No_drug |    X     |
| D_drug_1\_Y    |   **A**   | D_drug    |    Y     |
| D_drug_2\_Y    |   **B**   | D_drug    |    Y     |
| D_No_drug_1\_Y |   **A**   | D_No_drug |    Y     |
| D_No_drug_2\_Y |   **B**   | D_No_drug |    Y     |

## Multifactorial {.smaller}

Construct the model matrix using the code below
```{r}
sample_table <- read_tsv("data/multifactorial_sample_description.tsv", col_names = TRUE)
```


```{r}
#| echo: true
#| eval: false
model.matrix(~ Batch + Genotype + Condition + Genotype:Condition, sample_table)
```

Differential expression command

```{r}
#| echo: true
#| eval: false
DESeq2Table <- DESeqDataSetFromMatrix(countData = feature.counts.table,
                                      colData = sample_table,
                                      design = ~  Batch + Genotype + Condition + Genotype:Condition)
```

The interaction term added to the experimental design model **Genotype:Condition**, enables DESeq2 to account for the Condition (treatment), the background Genotype effect as well as the interaction between the different Genotypes and the Condition.

## Time Course
::: columns

::: {.column width="50%"}
Pairwise comparison - compares expression at time points
```{r}
 
time <- read_tsv("./data/time_course_table.tsv") %>%
  pivot_longer(!c(Sample,Condition), names_to = "Time", values_to = "Expression")  %>%
  mutate_if(is.character,as.factor)

mean <- time %>%
  group_by(Time) %>%
  summarize(Mean = mean(Expression, na.rm=TRUE)) %>%
  arrange(match(Time, c("0h", "3h", "6h", "9h", "12h"))) 

time <- left_join(time,mean)
  

ggplot(time, aes(x = Time,  y = Expression, fill = Condition)) +
  geom_point(shape = 21, size = 4) +
  geom_errorbar(aes(ymin = Mean, ymax = Mean), width = 0.4, colour = "grey") +
  scale_x_discrete(limits = unique(time$Time)) +
  ylim(0,4) +
  polyomics_theme() +
  theme(legend.position = "none",
        axis.line = element_line(colour = "grey"),
        axis.title.x=element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank())
```
:::

:::{.column width="50%"}
Want to compare changes in expression with respect to Treatment **and** Time
```{r}
ggplot(time, aes(x = Time,  y = Expression, fill = Condition)) +
  geom_point(shape = 21, size = 4) +
  stat_summary(fun="mean", geom="line", aes(group=factor(Condition)), colour = "grey") +
  scale_x_discrete(limits = unique(time$Time)) +
  ylim(0,4) +
  polyomics_theme() +
  theme(legend.position = "none",
        axis.line = element_line(colour = "grey"),
        axis.title.x=element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank())
```

:::

:::

## Time Course

### Likelihood Ratio Testing (LRT)
Analyse all levels of a factor at once. LRT identifies genes that change expression across the different levels.

```{r}
 
time <- read_tsv("./data/time_course_table.tsv") %>%
  pivot_longer(!c(Sample,Condition), names_to = "Time", values_to = "Expression")  %>%
  mutate_if(is.character,as.factor)

mean <- time %>%
  group_by(Time,Condition) %>%
  summarize(Mean = mean(Expression, na.rm=TRUE)) %>%
  arrange(match(Time, c("0h", "3h", "6h", "9h", "12h")))

time <- left_join(time,mean)
  

ggplot(time, aes(x = Time, y = Expression, fill = Condition)) +
  geom_point(shape = 21, size = 4) +
  geom_errorbar(aes(ymin = Mean, ymax = Mean), width = 0.4, colour = "grey") +
  stat_summary(fun="mean", geom="line", aes(group=factor(Condition)), colour = "grey") +
  scale_x_discrete(limits = unique(time$Time)) +
  ylim(0,4) +
  polyomics_theme() +
  theme(legend.position = "none",
        axis.line = element_line(colour = "grey"),
        axis.title.x=element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background = element_blank()
  )
```

## Time Course {.smaller}

Differential expression command

-   Full model

```{r}
#| echo: true
#| eval: false
DESeq2 <- DESeqDataSetFromMatrix(countData = feature.counts.table,
                                 colData = sample_table,
                                 design = ~  Batch + Condition + Time + Condition:Time)
```

-   Reduced model

```{r}
#| echo: true
#| eval: false
DESeq2 <- DESeq(DESeq2,
                test = "LRT",
                reduced = ~  Batch + Condition + Time)
```

The p-values are determined solely by the difference in deviance between the **Full** and **Reduced** model formula (not log2 fold changes)

## Tutorial

## CRAN packages {.smaller}

```{r CRAN}
#| echo: true
#| code-overflow: scroll
#| output: false

cran.packages <- c("tidyverse",
                   "devtools")

cran.load <- function(pkg){
        new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
        if (length(new.pkg)){
          install.packages(new.pkg, dependencies = TRUE)
          }
        sapply(pkg, require, character.only = TRUE)
}
cran.load(cran.packages)
```

## Bioconductor Packages {.smaller}

```{r Bioconductor}
#| echo: true
#| code-overflow: scroll
#| output: false

bioconductor.packages <- c("DESeq2",
                      "biomaRt",
                      "org.Mm.eg.db")

bioconductor.load <- function(pkg){
        new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
        if (length(new.pkg)){
          if (!requireNamespace("BiocManager", quietly = TRUE))
            install.packages("BiocManager")
            BiocManager::install(new.pkg)
        }
        sapply(pkg, require, character.only = TRUE)
}
bioconductor.load(bioconductor.packages)
```

## Github Packages {.smaller}

```{r Github}
#| echo: true
#| code-overflow: scroll
#| output: false

git.packages <- c("pipelineTools")
repository <- "GrahamHamilton"
git.load <- function(pkg){
        new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
        if (length(new.pkg))
          install_github(paste(repository,new.pkg,sep = "/"), dependencies = TRUE)
        sapply(pkg, require, character.only = TRUE)
}
git.load(git.packages)
```

# Analysis {style="text-align: center;"}

## Set Up

### Results directory

Firstly, We will create a directory to save differential expression data

```{r}
#| echo: true
# Create directory for DESeq2 data
deseq2_results_dir = "DESeq2"
dir.create(deseq2_results_dir, showWarnings = FALSE)
```

### Statistical cut off values

Create the cut off used for filtering results

```{r}
#| echo: true
pvalueCutoff <- 0.05 # P value
qvalueCutoff <- 0.1 # Adjusted P value
foldchange <- 1 # Fold change, usually fold change is log2
```

## Set Up {.smaller}

### Samples

```{r}
#| echo: true
#| code-line-numbers: "1"
sample_table <- read_tsv("./data/sample_description.tsv",col_types = "ff")
sample_table  %>%
  head(n = 6) %>%
  kbl() %>%
  kable_styling() 
```

## Set Up {.smaller}

### Comparisons

```{r}
#| echo: true
#| code-line-numbers: "2"
# Import comparisons files and set column type to factors, this is an example for a comparisons table with a sample name and treanment column.
comparisons <- read_tsv("./data/comparisons.tsv",col_types = "ff")
comparisons%>%
  as.data.frame%>%
  head(n = 6) %>%
  kbl() %>%
  kable_styling() 
```

## Set Up {.smaller}

### Feature counts

Read in the feature counts table -featurecounts, from Rsubread package

```{r}
#| echo: true
#| code-line-numbers: "1-7"
feature.counts.table <- read_tsv("./data/feature_counts_table.tsv") %>%
  column_to_rownames(var = colnames(.[,1])) %>%
  as.data.frame()

# Ensure that the counts table is in the same order as the sample table
feature.counts.table <- feature.counts.table %>%
  dplyr::select(c(sample_table$Sample))

feature.counts.table %>%
  head(n = 3) %>%
  kbl() %>%
  kable_styling()
```

## Set Up

### HtSeq-Count

Read in the feature counts for the counts files - HtSeq Counts

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1-8"
files <- list.files("./data/htseq_counts/") %>%
  str_replace_all("-","_") %>%
  as.data.frame %>%
  rename(files = ".") %>% 
  bind_cols(read_tsv("./data/sample_description.tsv",col_types = "cf"))

sampleDataFrame <- data.frame(sampleName = files$Sample,
                      fileName = files$files,
                      condition = files$Condition)

sampleDataFrame %>%
  head(n = 3) %>%
  kbl() %>%
  kable_styling()
```

## Differential Expression

### DESeq2 using feature counts table

```{r}
#| echo: true
DESeq2Table <- DESeqDataSetFromMatrix(countData = feature.counts.table,
                                      colData = sample_table,
                                      design= ~  Condition)
dds <- DESeq(DESeq2Table)
```

Write the normalised read counts to a file

```{r}
#| echo: true
total.norm.counts <- counts(estimateSizeFactors(dds), normalized = TRUE) %>%
  as.data.frame() %>%
  rownames_to_column(var = "Ensembl_ID")
write_tsv(total.norm.counts,"normalised_read_counts.tsv")
```

```{r}
#| echo: true
total.norm.counts <- estimateSizeFactors(dds) %>%
  counts(normalized = TRUE) %>%
  as.data.frame() %>%
  rownames_to_column(var = "Ensembl_ID")
write_tsv(total.norm.counts,"normalised_read_counts.tsv")
```
## Differential Expression

### DESeq2 using htseq-count files

```{r}
#| echo: true
#| eval: false
DESeq2Table <- DESeqDataSetFromHTSeqCount(sampleTable = sampleDataFrame,
                                           directory = "./data/htseq_counts/",
                                           design= ~  condition)
dds <- DESeq(DESeq2Table)
```

## Saving Workspace
Save the workspace so we can carry on tomorrow without having to run these steps again. To save the entire workspace use the save.image() command

```{r}
#| echo: true
#| eval: false
save.image("Session2.RData")
```

