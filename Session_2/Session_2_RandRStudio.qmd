---
title: "R and RStudio"
author: "Graham Hamilton"
format:
  revealjs:
    slide-number: c/t
    show-slide-number: all

editor: source
---

## R Statistical Computing & Graphics

-   Free open souce software
-   Available for Windows, Mac and Linux/Unix operating systems
-   Large community of developers
-   Many packages/libraries
    -   CRAN repository

    -   Bioconductor repository

## Download and Install

Download the latest stable release of R from<br>https://www.r-project.org, latest version is 4.2.3

::: {layout-ncol="2"}
![](images/R_home_screen.png){width="70%"}

![](images/R_download_versions.png){width="30%"}
:::

## RStudio

-   Integrated development environment (IDE)
    -   R
    -   Python
-   Console for running code
-   Code editor with syntax colouring
-   Workspace/file managment
-   Records history of commands

## RStudio

Download from https://posit.co/download/rstudio-desktop/

::: columns
::: {.column width="65%"}
![](images/RStudio_download.png){width="100%"}
:::

::: {.column width="35%"}
::: {style="font-size: 80%;"}
-   This page should detect your operating system
-   Download RStudio
-   Click on the install package
-   Follow install instructions
:::
:::
:::

## Install R & RStudio

## RStudio

Set up Rstudio - Set options in **Tools** and **Global Options...**

::: columns
::: {.column width="55%"}
![](images/RStudio_settings.png){width="100%"}
:::

::: {.column width="45%"}
-   Uncheck the boxes as shown in the example
-   Ensure that *Save workspace to .RData on exit* is set to **Never**

[<br><br>YouTube video on installing and setting up RStudio<br> https://www.youtube.com/watch?v=D6CunpqF04E]{style="color:grey; font-size: 20px;"}
:::
:::

<!-- ::: footer -->

<!-- YouTube video on installing and setting up RStudio\ -->

<!-- https://www.youtube.com/watch?v=D6CunpqF04E -->

<!-- ::: -->

## RStudio

::: columns
::: {.column width="60%"}
![](images/RStudio_panels.png){width="100%"}
:::

::: {.column width="40%"}
::: {style="font-size: 80%;"}
-   [Source pane]{style="color:red;"}
    -   Write R commands as R scripts or Notebooks\
-   [Console Pane]{style="color:blue;"}
    -   Where the R commands are executed
-   [Environment pane]{style="color:green;"}
    -   Details of the R variables
-   [Files pane]{style="color:yellow;"}
    -   View the directory and file structure
:::
:::
:::

## R Notebooks

::: columns
::: {.column width="50%"}
R Notebooks are Markdown documents with chunks of code that can be executed independently. Output from the code is visible beneath the code in the Notebook.
:::

::: {.column width="50%"}
![](images/R_notebook.png)
:::
:::

## R Notebooks {.smaller}

*   Code chunks can be inserted using the Insert Chunk button
*   Code chunks can be inserted by pressing Control,Alt and I keys
*   Code chunks can be executed by clicking the green arrow head
*   Code chunks can be executed by pressing Control,Shift and enter keys

![](images/R_notebook_code_chunk.png)

## Download Course Material

https://github.com/GrahamHamilton/Course

::: r-stack
![](images/Github.png){.fragment height="500"}

![](images/Github_download.png){.fragment height="300"}
:::

## Download Course Material

-   Unzip the downloaded file
-   Move the folder to a suitable place on computer
-   Open RStudio and, using the files pane, navigate to the Course-main folder
-   Double click on the Course.Rproj


## Base R Tutorial
*   Open the directory "Session_2"
*   Click the file called "Session2_Tutorial_Intro_to_base_R.Rmd"

##

## RStudio Libraries

R packages or libraries are extensions to the R language.\
R packages contain:

-   Code\
-   Data\
-   Documentation

The packages are in a standardised format and can be installed from repositories

## R Repositories

-   Comprehensive R Archive Network (CRAN)
    -   Main software repositiry, supported by the R Foundation
-   Bioconductor
    -   R packages for the analysis of biological data
-   GitHub
    -   Alternative repository for R packages, often in active development

## Installing Libraries

### RStudio

::: r-stack
![](images/RStudio_tools.png){.fragment height="500"}

![](images/RStudio_package_installer.png){.fragment width="346" height="238"}
:::

## Installing Packages

### Terminal

From CRAN using the R command install.packages

```{r}
#| echo: true
#| eval: false
install.packages("tidyverse")
```

From Bioconductor First need to install a package manager program

```{r}
#| echo: true
#| eval: false
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install()
```

Then can install specific packages

```{r}
#| echo: true
#| eval: false
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
```

## Installing Packages

### Terminal

From GitHub First need to install devtools from CRAN

```{r}
#| echo: true
#| eval: false
install.packages("devtools")
require("devtools")
```

Then can install GitHub packages. Github packages are usually named after the repository name then the package name e.g. GrahamHamilton/Rpackage

```{r}
#| echo: true
#| eval: false
install_github("GrahamHamilton/Rpackage")
```

## Installing Packages

Now install these packages

-   CRAN

    -   tidyverse

    -   devtools

## 

## Loading Packages

Packages have to be loaded prior to use. There are two ways to load packages in R.

-   **library()**
    -   library() will output an error and stop the execution of the code
-   **require()**
    -   require() will output a warning if a package is not installed and continue to execute the code

## Loading Packages

Load the libraries separately

```{r}
#| echo: true
library("tidyverse")
library("Rsubread")
```

Or as a comma seperated list

```{r}
#| echo: true
library("tidyverse","Rsubread")
```

## Loading Packages

Loading packages within a function from CRAN

```{r}
#| echo: true
#| code-line-numbers: "|1-2|9"
cran.packages <- c("tidyverse",
                   "kableExtra")

cran.load <- function(pkg){
        new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
        if (length(new.pkg)){
          install.packages(new.pkg, dependencies = TRUE)
          }
        sapply(pkg, require, character.only = TRUE)
}
cran.load(cran.packages)
```

## Loading Packages

Loading packages within a function from Bioconductor

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|1|10"
biomart.packages <- c("Rsubread")

biomart.load <- function(pkg){
        new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
        if (length(new.pkg)){
          if (!requireNamespace("BiocManager", quietly = TRUE))
            install.packages("BiocManager")
            BiocManager::install(new.pkg)
        }
        sapply(pkg, require, character.only = TRUE)
}
biomart.load(biomart.packages)
```

## Tidyverse {.smaller}

The tidyverse is a collection of R packages designed for data science

::: columns
::: {.column width="50%"}
-   **ggplot2** ![](images/ggplot2.png){width="100"}

    -   Package for creating graphics

-   **dplyr** ![](images/dplyr.png){width="100"}

    -   Package for data manipulation
:::

::: {.column width="50%"}
-   **tidyr** ![](images/tidyr.png){width="100"}

    -   Package for tidying data

-   **readr** ![](images/readr.png){width="100"}

    -   Package for reading in data
:::
:::

::: footer
https://www.tidyverse.org
:::

## ggplot2

ggplot2 is a package for creating graphics

-   Based on the Grammar of Graphics\
-   Part of the tidyverse set of tools
-   Call ggplot()
    -   Supply a suitably formatted data set\
    -   What to plot from the data via aes (aesthetics), can also add colour, size, shape and transparency\
    -   How the data is represented via the geom\_

## Tidyverse  {.smaller}
### Piping data
![](images/magrittr.png){width="100"}
Tidyverse uses an operator, %>%, that takes to out put from one command and uses it as the input for a subsequent command with out having to use intermediate variable names.


## Tidyverse  {.smaller}
### Piping data

::: {style="font-size: 75%;"}
Log a series of numbers and round to one decimal place

*   Create the list of numbers


```{r}
#| echo: true
number_vector <- c(23,43,76,93,72,58,45)
```

*   Base R
```{r}
#| echo: true
# Base R
round(log(number_vector), digits = 1)
```

*   Tidyverse uses the pipe operator and it makes the code easier to read, especially when more than a couple of operations are performed on the data
```{r}
#| echo: true
# Tidyverse
number_vector %>%
  log() %>%
  round(digits = 1)
```
:::

## MPG data {.smaller}

Example data provide in R, which we will use for the **ggplot2** examples.

<br>

::: {style="font-size: 75%;"}
```{r}
#| echo: true
head(mpg, n = 3) %>%
  kbl() %>%
  kable_styling()
```
:::

## ggplot2 {.smaller}

ggplot builds a plot in layers.  

The first layer would be an empty plotting pane.

```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| output-location: column
ggplot()
```


## ggplot2 {.smaller}

Set the data and plotting area, with ggplot and the aesthetics, to plot the miles per gallon on the motorway on the x axis and miles per gallon on the y axis

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| output-location: column
ggplot(mpg, aes(x = hwy, y = cty, color = cyl))
```
:::

## ggplot2 {.smaller}

Scatter plot with geom_point

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "2"
#| output-location: column
ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point()
```
:::

## ggplot2 {.smaller}

Change the transparency and size of the points

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "2"
#| output-location: column
ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2)
```
:::

## ggplot2 {.smaller}

Change the point colours

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "3"
#| output-location: column
ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2)  +
  scale_color_viridis_c()
```
:::

## ggplot2 {.smaller}

Add title and change axis labels

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| code-line-numbers: "4-6"
#| output-location: column

ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2)  +
  scale_color_viridis_c() +
  labs(title = "Miles per gallon",
       x = "Motorway miles per gallon",
       y = "City miles per gallon")
```
:::

## ggplot2 {.smaller}

Box plot

*   Need to convert the cylinder column from a continuous variable to distinct variable

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| output-location: column
mpg <- mpg %>% mutate_at(vars(cyl), factor)

ggplot(mpg, aes(x = cyl, y = hwy, fill = cyl)) +
  geom_boxplot() +
  scale_fill_viridis_d()
```
:::

## ggplot2 {.smaller}

Box plot

*   Add the data points

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| output-location: column
ggplot(mpg, aes(x = cyl, y = hwy, fill = cyl)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.5, size = 2) +
  scale_fill_viridis_d()
```
:::

## ggplot2 {.smaller}

Violin plot

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| fig-width: 8
#| fig-height: 6
#| output-location: column
ggplot(mpg, aes(x = cyl, y = hwy, fill = cyl)) +
  geom_violin() +
  scale_fill_viridis_d()
```
:::

## ggplot2 - Themes

```{r}
#| echo: false

library("patchwork")

default <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_colour_viridis_d() +
  labs(title = "Default Theme") +
  theme(legend.position = "none")

bw <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "BW Theme") +
  theme_bw() +
  theme(legend.position = "none")

linedraw <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "Linedraw Theme") +
  theme_linedraw() +
  theme(legend.position = "none")

light <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "Light Theme") +
  theme_light() +
  theme(legend.position = "none")

dark <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "Dark Theme") +
  theme_dark() +
  theme(legend.position = "none")

minimal <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "Minimal Theme") +
  theme_minimal() +
  theme(legend.position = "none")

classic <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "Classic Theme") +
  theme_classic() +
  theme(legend.position = "none")

void <- ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_d() +
  labs(title = "Void Theme") +
  theme_void() +
  theme(legend.position = "none")

(default | bw | linedraw | light) /
  (dark | minimal | classic | void)
```


## Tidyverse {.smaller}

### Data Tidying

-   First steps cleaning and preparing data
-   Time consuming
-   Packages supplied by the Tidyverse
    -   Share an underlying grammer and styructure

    -   Standardises data tidying
-   Tidy data has:
    -   Value, usually numbers
    -   Name, of a group to which the value belongs

## Tidyverse {.smaller}
Reading in the data from a text file, values separated by white space.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1"
example_table <- read_delim("data/example_table.txt", delim = " ")
example_table  %>%
  kbl() %>%
  kable_styling()
```

## Tidyverse {.smaller}

Imported data

::: {style="font-size: 75%;"}
```{r}
#| echo: false
#| eval: true
example_table  %>%
  kbl() %>%
  kable_styling()
```
:::

### Data Tidying

Tidy data using the pivot_longer() command from tidyr package

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1"
pivot_table <- example_table %>% pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
pivot_table %>%
  kbl() %>%
  kable_styling()
```
:::

## Tidyverse  {.smaller}

```{r}
#| echo: true
#| eval: true
ggplot(pivot_table, aes(x = Gene, y = Expression, colour = Gene)) +
  geom_point(size = 5) +
  geom_text(aes(label = Sample),nudge_x = 0, nudge_y = 5, colour = "black") +
  scale_color_viridis_d()
```

## Tidyverse {.smaller}

```{r}
#| echo: true
#| eval: true
real_data <- read_tsv("data/tidyverse_data_example.tsv", col_names = TRUE)
```

<br>

::: {style="font-size: 75%;"}
```{r}
#| echo: false
#| eval: true
head(real_data)  %>%
  kbl() %>%
  kable_styling()
```
:::

**Notice the numbers after the gene names**

## Tidyverse {.smaller}
Tidy up the gene names using the tidyr command separate_wider_delim()

<br>

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1-2"
real_data %>% 
  separate_wider_delim(cols = Gene_names, delim = "_", names = c("Gene","Number")) %>%
  head(n = 3)  %>%
  kbl() %>%
  kable_styling()
```
:::

## Tidyverse {.smaller}
The numbers after the gene names are not required, so can set the names for the Numbers to NA
<br>

::: {style="font-size: 75%;"}
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1-2"
real_data <- real_data %>% 
  separate_wider_delim(cols = Gene_names, delim = "_", names = c("Genes",NA))
  head(real_data, n = 3)  %>%
  kbl() %>%
  kable_styling()
```
:::

## Tidyverse {.smaller}

Tidy the data

```{r}
#| echo: true
#| eval: true

pivot_real_data <- real_data %>% 
  pivot_longer(-Genes, names_to = "Samples", values_to = "Expression")
```

::: {style="font-size: 75%;"}
```{r}
#| echo: false
#| eval: true
head(pivot_real_data)  %>%
  kbl() %>%
  kable_styling()
```
:::

## Tidyverse {.smaller}

Plot the data

```{r}
#| echo: true
#| eval: true
ggplot(pivot_real_data, aes(x = Samples, y = Expression, fill = Samples)) +
  geom_boxplot() 
```

## Tidyverse {.smaller}

Log transform the expression values

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(pivot_real_data, aes(x = Samples, y = Expression, fill = Samples)) +
  geom_boxplot() +
  scale_y_log10() 
```

## Tidyverse {.smaller}

Make the plot look prettier

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "4-9"
ggplot(pivot_real_data, aes(x = Samples, y = Expression, fill = Samples)) +
  geom_boxplot() +
  scale_y_log10() +
  labs(x = NULL,
       y = "Log10(Expression)") +
  scale_fill_viridis_d() +
  theme_classic() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

## Tidyverse {.smaller}

::: {style="font-size: 75%;"}

Dplyr simplifies data manipulation

::: columns
::: {.column width="50%"}
-   Original table

```{r}
head(pivot_table) %>%
  kbl() %>%
  kable_styling()
```
:::

::: {.column width="50%"}
-   Select columns from a dataframe

```{r}
#| echo: true
#| eval: true
pivot_table %>%
  select(c(Sample,Expression))
```

-   Filter rows that match a value in a column

```{r}
#| echo: true
#| eval: true
pivot_table %>%
  filter(Gene == "ACT1")
```
:::
:::
:::


## Tidyverse {.smaller}
Boxplot - Expression of a names gene
```{r}
#| echo: true
#| eval: true
expression_table <- pivot_real_data %>%
  separate_wider_delim(Samples, delim = "_", names = c("Sample", "Replicate")) %>%
  filter(Genes == "CHAC1")
 
box <- ggplot(expression_table, aes(x = Sample, y = Expression, fill = Sample)) +
  geom_boxplot() +
  scale_y_log10() +
  labs(x = NULL,
       y = "Log10(Expression)") +
  scale_fill_viridis_d() +
  theme_classic() +
  theme(legend.position = "none")
box
```


## Saving data to files  {.smaller}

### Tidyverse

Saving a data frame to a files using the **readr** command **write_delim()**

```{r}
#| echo: true
write_delim(expression_table, "data/gene_expression_table.tsv", delim = "\t")
```

Saving a plot using the **ggplot2** command **ggsave**

```{r}
#| echo: true
ggsave(filename = "boxplot.png", plot = box, path = "data")
```
